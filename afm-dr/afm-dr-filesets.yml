---
- name: source Cluster (access) | Check if the fileset ( {{fileset_loop.source_scale_filesystem}} ) is already defined
  uri:
    validate_certs: "{{ validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ source_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems/{{ fileset_loop.source_scale_filesystem }}/filesets
    method: GET
    user: "{{ source_scale_gui_username }}"
    password: "{{ source_scale_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: source_fileset_results
  ignore_errors: true  

- set_fact:
    source_fileset_names: "{{ source_fileset_results.json |  json_query(jmesquery) }}"
  vars:
    jmesquery: "filesets[*].filesetName"  

- name: Fileset information
  debug:
    msg: "{{ source_fileset_names }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  

- name: block
  block:
    - name: Storage Cluster (owning) | Create the fileset "{{ fileset_loop.source_scale_filesystem }}"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ source_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems/{{ fileset_loop.source_scale_filesystem }}/filesets
        method: POST
        user: "{{ source_scale_gui_username }}"
        password: "{{ source_scale_gui_password }}"
        body_format: json
        body: |
          {
            "filesetName": "{{ fileset_loop.source_dir }}", 
            "afmMode": "primary", 
            "inodeSpace": "new", 
            "afmTarget": "gpfs://{{ fileset_loop.target_filesystem_mountpoint }}/{{ fileset_loop.target_dir }}",
            "afmRPO": 60
          }
        status_code:
          - 202
      register: storage_fileset_return      

    - name: Add fileset response
      debug:
        msg: "{{ storage_fileset_return }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
     

    - name: "Storage Cluster (owning) | Check the result of creating the fileset and mounting the filesystem (JOB: {{ storage_fileset_return.json.jobs[0].jobId }})"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ source_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/jobs/{{ storage_fileset_return.json.jobs[0].jobId }}
        method: GET
        user: "{{ source_scale_gui_username }}"
        password: "{{ source_scale_gui_password }}"
      register: completed_check1
      until: completed_check1.json.jobs[0].status == "COMPLETED"
      retries: "{{ restapi_retries_count }}"
      delay: "{{ restapi_retries_delay }}"      

  when: (source_fileset_results.status == 400) or (source_fileset_results.status == 200 and fileset_loop.source_dir not in source_fileset_names)


- name: target Cluster (access) | Check if the fileset ( {{fileset_loop.target_scale_filesystem}} ) is already defined
  uri:
    validate_certs: "{{ validate_certs_uri }}"
    force_basic_auth: yes
    url: https://{{ target_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems/{{ fileset_loop.target_scale_filesystem }}/filesets
    method: GET
    user: "{{ target_scale_gui_username }}"
    password: "{{ target_scale_gui_password }}"
    body_format: json
    status_code:
      - 200
  register: target_fileset_results
  ignore_errors: true

- set_fact:
    target_fileset_names: "{{ target_fileset_results.json |  json_query(jmesquery) }}"
  vars:
    jmesquery: "filesets[*].filesetName"

- name: target fileset information
  debug:
    msg: "{{ target_fileset_names }}"
  when: scale_remotemount_debug is defined and scale_remotemount_debug | bool


- name: block
  block:
    - name: Storage Cluster (owning) | Check if afmPrimaryID for the filesystem ({{ fileset_loop.source_dir }})
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: "https://{{ source_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems/{{ fileset_loop.source_scale_filesystem }}/filesets?fields=:all:"
        method: GET
        user: "{{ source_scale_gui_username }}"
        password: "{{ source_scale_gui_password }}"
        body_format: json
        status_code:
          - 200
      register: get_afmprimaryid
      ignore_errors: true      

    - set_fact:
        fileset_id: "{{ get_afmprimaryid.json |  json_query(jmesquery) | first | join }}"
      vars:
        jmesquery: "filesets[?filesetName=='{{ fileset_loop.source_dir }}'].afm.afmPrimaryID"

    - name: Fileset information
      debug:
        msg: "{{ fileset_id }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool

    - name: target Cluster (access) | Create the fileset ({{ fileset_loop.target_dir }})
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ target_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems/{{ fileset_loop.target_scale_filesystem }}/filesets
        method: POST
        user: "{{ target_scale_gui_username }}"
        password: "{{ target_scale_gui_password }}"
        body_format: json
        body: |
          {
            "filesetName": "{{ fileset_loop.target_dir }}", 
            "afmMode": "secondary", 
            "inodeSpace": "new", 
            "afmPrimaryID": "{{fileset_id}}"
          }
        status_code:
          - 202
      register: target_fileset_return

    - name: Add fileset response
      debug:
        msg: "{{ target_fileset_return }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      

    - name: "target Cluster (access) | Check the result of creating the fileset and mounting the filesystem (JOB: {{ target_fileset_return.json.jobs[0].jobId }})"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ target_scale_gui_hostname }}/{{ scalemgmt_endpoint }}/jobs/{{ target_fileset_return.json.jobs[0].jobId }}
        method: GET
        user: "{{ target_scale_gui_username }}"
        password: "{{ target_scale_gui_password }}"
      register: completed_check2
      until: completed_check2.json.jobs[0].status == "COMPLETED"
      retries: "{{ restapi_retries_count }}"
      delay: "{{ restapi_retries_delay }}"

  when: (target_fileset_results.status == 400) or (target_fileset_results.status == 200 and fileset_loop.target_dir not in target_fileset_names)