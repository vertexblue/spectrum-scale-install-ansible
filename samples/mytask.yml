- hosts: all
  tasks:
    - name: Enable AFM on both clusters
      shell: /usr/lpp/mmfs/bin/mmchconfig afmEnableADR=yes -i
      register: ps
      run_once: true
      changed_when: false
      failed_when: false

#----------------------------------------- Client cluster ----------------------------------------------

- hosts: client_gui_hostname
  vars:
    input: "{{ lookup('file','dr-config.json') | from_json }}"

  pre_tasks:
   - name: Make Sure the mandatory input values are passed from the configuration json file - dr-config.json
     fail:
      msg: "Variables file dr-config.json must exist the same directory"
     when: input is not defined or input.scale_remotemount_client_gui_username is not defined

  tasks:
    - set_fact:
        scale_remotemount_client_gui_username: "{{ input.scale_remotemount_client_gui_username }}"
        scale_remotemount_client_gui_password: "{{ input.scale_remotemount_client_gui_password }}"
        scale_remotemount_client_gui_hostname: "{{ input.scale_remotemount_client_gui_hostname }}"
        scale_remotemount_storage_gui_username: "{{ input.scale_remotemount_storage_gui_username }}"
        scale_remotemount_storage_gui_password: "{{ input.scale_remotemount_storage_gui_password }}"
        scale_remotemount_storage_gui_hostname: "{{ input.scale_remotemount_storage_gui_hostname }}"
        scale_remotemount_filesystem_names: "{{ input.scale_remotemount_filesystem_names }}"
        #- { scale_remotemount_storage_filesystem_name: "prdfs1", scale_remotemount_client_filesystem_name: "drfs1", scale_remotemount_client_remotemount_path: "/gpfs/drfs1", } # Minimum variables
        scale_fileset_names: "{{ input.scale_fileset_names }}"
        #- { scale_fileset_storage_fileset_name: "primary2", scale_fileset_storage_filesystem_name: "prdfs1", scale_fileset_client_filesystem_name: "drfs1"} # Minimum variables
        validate_certs_uri: "no"
        restapi_retries_count: 5
        restapi_retries_delay: 3
        scalemgmt_endpoint: "scalemgmt/v2"
        remote_mount_endpoint: "scalemgmt/v2/remotemount"
      run_once: True

    - name: "Read cluster information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/cluster
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: client_cluster_info
      run_once: True

    - name: Cluster information
      debug:
        msg: "{{ client_cluster_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool
      run_once: True

    - set_fact: 
        client_cluster_name: "{{client_cluster_info.json.cluster.clusterSummary.clusterName}}"

    - name: Cluster Name
      debug:
        msg: "{{ client_cluster_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster filesystems information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems?fields=mount.mountPoint
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: client_filesystem_info
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ client_filesystem_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        client_filesystem_names: "{{client_filesystem_info.json.filesystems}}"

    - name: Read filesystem names
      debug:
        msg: "{{ client_filesystem_names }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster key"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/remotemount/authenticationkey
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: raw
        status_code:
         - 200
      register: client_cluster_key
      run_once: True

    - name: "Write cluster key in Json"
      copy:
        content: "{{ client_cluster_key | json_query('json.key[]') }}"
        dest: "/var/mmfs/ssl/dr_rsa.json"
      run_once: true
      changed_when: false
      failed_when: false

    - name: "Write cluster key"
      shell:
        cmd: sed 's/,/\n/g' /var/mmfs/ssl/dr_rsa.json | tr -d '"\[\]' | sed 's/^ //' > /var/mmfs/ssl/dr_rsa.key
        warn: false
      run_once: true
      changed_when: false
      failed_when: false

    - name: "Read cluster storage nodes information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/nodeclasses/storagenodegrp
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: client_storage_nodes
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ client_storage_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        client_cluster_nodes: "{{client_storage_nodes.json.nodeclasses[0].memberNodes}}"

    - name: Cluster storage nodes
      debug:
        msg: "{{ client_cluster_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/cluster
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: storage_cluster_info
      run_once: True

    - name: Cluster information
      debug:
        msg: "{{ storage_cluster_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact: 
        storage_cluster_name: "{{storage_cluster_info.json.cluster.clusterSummary.clusterName}}"

    - name: Cluster Name
      debug:
        msg: "{{ storage_cluster_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster filesystems information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems?fields=mount.mountPoint
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: storage_filesystem_info
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ storage_filesystem_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        storage_filesystem_names: "{{storage_filesystem_info.json.filesystems}}"

    - name: Read filesystem names
      debug:
        msg: "{{ storage_filesystem_names }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster key"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/remotemount/authenticationkey
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: raw
        status_code:
         - 200
      register: storage_cluster_key
      run_once: True

    - name: "Write cluster key in Json"
      copy:
        content: "{{ storage_cluster_key | json_query('json.key[]') }}"
        dest: "/var/mmfs/ssl/prd_rsa.json"
      run_once: true
      changed_when: false
      failed_when: false

    - name: "Write cluster key"
      shell:
        cmd: sed 's/,/\n/g' /var/mmfs/ssl/prd_rsa.json | tr -d '"\[\]' | sed 's/^ //' > /var/mmfs/ssl/prd_rsa.key
        warn: false
      run_once: true 
      changed_when: false
      failed_when: false

    - name: Cluster storage nodes
      debug:
        msg: "{{ storage_cluster_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster storage nodes information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/nodeclasses/storagenodegrp
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: storage_storage_nodes
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ storage_storage_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        storage_cluster_nodes: "{{storage_storage_nodes.json.nodeclasses[0].memberNodes}}"

    - name: Cluster storage nodes
      debug:
        msg: "{{ storage_cluster_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True
    
    - name: Client Cluster (access) | Add Storage Cluster Key
      shell: mmauth add {{storage_cluster_name}} -k "/var/mmfs/ssl/prd_rsa.key"
      register: auth_key_return
      run_once: True
      changed_when: false
      failed_when: false

    - name: Client Cluster (access) | Authorize filesystem
      shell: mmauth grant {{storage_cluster_name}} -f {{item.scale_remotemount_client_filesystem_name}}
      register: auth_return
      run_once: True
      loop: "{{ scale_remotemount_filesystem_names }}"

    - name: Client Cluster (access) | Enabled AFM on the filesystem
      shell: mmafmconfig enable {{item.scale_remotemount_client_remotemount_path}}
      register: afm_return
      run_once: True
      loop: "{{ scale_remotemount_filesystem_names }}"
      changed_when: false
      failed_when: false

    - name: "Client Cluster (access) | Assign gateway role to storage nodes"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: true
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/nodes/{{ item.split('.').0 }}
        method: PUT
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        body: |
          {
            "gateway": true
          }
        status_code:
          - 202
      loop: "{{ client_cluster_nodes }}"    
      register: assign_gateway_return

#--------------------------------------------------------------------------      

- hosts: storage_gui_hostname
  vars:
    input: "{{ lookup('file','dr-config.json') | from_json }}"
  
  pre_tasks:
   - name: Make Sure the mandatory input values are passed from the configuration json file - dr-config.json
     fail:
      msg: "Variables file dr-config.json must exist the same directory"
     when: input is not defined or input.scale_remotemount_client_gui_username is not defined

  tasks:
    - set_fact: 
        
        scale_remotemount_client_gui_username: "{{ input.scale_remotemount_client_gui_username }}"
        scale_remotemount_client_gui_password: "{{ input.scale_remotemount_client_gui_password }}"
        scale_remotemount_client_gui_hostname: "{{ input.scale_remotemount_client_gui_hostname }}"
        scale_remotemount_storage_gui_username: "{{ input.scale_remotemount_storage_gui_username }}"
        scale_remotemount_storage_gui_password: "{{ input.scale_remotemount_storage_gui_password }}"
        scale_remotemount_storage_gui_hostname: "{{ input.scale_remotemount_storage_gui_hostname }}"
        scale_remotemount_filesystem_names: "{{ input.scale_remotemount_filesystem_names }}"
        #- { scale_remotemount_client_filesystem_name: "drfs1", scale_remotemount_client_remotemount_path: "/gpfs/drfs1", } # Minimum variables
        scale_fileset_names: "{{ input.scale_fileset_names }}"
        #- { scale_fileset_storage_fileset_name: "primary2", scale_fileset_storage_filesystem_name: "prdfs1", scale_fileset_client_filesystem_name: "drfs1"} # Minimum variables
        validate_certs_uri: "no"
        restapi_retries_count: 5
        restapi_retries_delay: 3
        scalemgmt_endpoint: "scalemgmt/v2"
        remote_mount_endpoint: "scalemgmt/v2/remotemount"
      run_once: True


    - name: "Read cluster information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/cluster
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: client_cluster_info
      run_once: True

    - name: Cluster information
      debug:
        msg: "{{ client_cluster_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact: 
        client_cluster_name: "{{client_cluster_info.json.cluster.clusterSummary.clusterName}}"

    - name: Cluster Name
      debug:
        msg: "{{ client_cluster_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster filesystems information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems?fields=mount.mountPoint
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: client_filesystem_info
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ client_filesystem_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        client_filesystem_names: "{{client_filesystem_info.json.filesystems}}"

    - name: Read filesystem names
      debug:
        msg: "{{ client_filesystem_names }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster key"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/remotemount/authenticationkey
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: raw
        status_code:
         - 200
      register: client_cluster_key
      run_once: True

    - name: "Write cluster key in Json"
      copy:
        content: "{{ client_cluster_key | json_query('json.key[]') }}"
        dest: "/var/mmfs/ssl/dr_rsa.json"
      run_once: true
      changed_when: false
      failed_when: false

    - name: "Write cluster key"
      shell:
        cmd: sed 's/,/\n/g' /var/mmfs/ssl/dr_rsa.json | tr -d '"\[\]' | sed 's/^ //' > /var/mmfs/ssl/dr_rsa.key
        warn: false
      run_once: true
      changed_when: false
      failed_when: false

    - name: "Read cluster storage nodes information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_client_gui_hostname }}/{{ scalemgmt_endpoint }}/nodeclasses/storagenodegrp
        method: GET
        user: "{{ scale_remotemount_client_gui_username }}"
        password: "{{ scale_remotemount_client_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: client_storage_nodes
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ client_storage_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        client_cluster_nodes: "{{client_storage_nodes.json.nodeclasses[0].memberNodes}}"

    - name: Cluster storage nodes
      debug:
        msg: "{{ client_cluster_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/cluster
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: storage_cluster_info
      run_once: True

    - name: Cluster information
      debug:
        msg: "{{ storage_cluster_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact: 
        storage_cluster_name: "{{storage_cluster_info.json.cluster.clusterSummary.clusterName}}"

    - name: Cluster Name
      debug:
        msg: "{{ storage_cluster_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster filesystems information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/filesystems?fields=mount.mountPoint
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: storage_filesystem_info
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ storage_filesystem_info }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        storage_filesystem_names: "{{storage_filesystem_info.json.filesystems}}"

    - name: Read filesystem names
      debug:
        msg: "{{ storage_filesystem_names }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster key"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/remotemount/authenticationkey
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: raw
        status_code:
         - 200
      register: storage_cluster_key
      run_once: True

    - name: "Write cluster key in Json"
      copy:
        content: "{{ storage_cluster_key | json_query('json.key[]') }}"
        dest: "/var/mmfs/ssl/prd_rsa.json"
      run_once: true
      changed_when: false
      failed_when: false

    - name: "Write cluster key"
      shell:
        cmd: sed 's/,/\n/g' /var/mmfs/ssl/prd_rsa.json | tr -d '"\[\]' | sed 's/^ //' > /var/mmfs/ssl/prd_rsa.key
        warn: false
      run_once: true 
      changed_when: false
      failed_when: false

    - name: Cluster storage nodes
      debug:
        msg: "{{ storage_cluster_name }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Read cluster storage nodes information"
      uri:
        validate_certs: "{{ validate_certs_uri }}"
        force_basic_auth: yes
        url: https://{{ scale_remotemount_storage_gui_hostname }}/{{ scalemgmt_endpoint }}/nodeclasses/storagenodegrp
        method: GET
        user: "{{ scale_remotemount_storage_gui_username }}"
        password: "{{ scale_remotemount_storage_gui_password }}"
        body_format: json
        status_code:
         - 200
      register: storage_storage_nodes
      run_once: True

    - name: Filsystem information
      debug:
        msg: "{{ storage_storage_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - set_fact:
        storage_cluster_nodes: "{{storage_storage_nodes.json.nodeclasses[0].memberNodes}}"

    - name: Cluster storage nodes
      debug:
        msg: "{{ storage_cluster_nodes }}"
      when: scale_remotemount_debug is defined and scale_remotemount_debug | bool  
      run_once: True

    - name: "Client Cluster (access) | Assign gateway role to storage nodes"
      shell: mmremotecluster add {{client_cluster_name}} -n {{client_cluster_nodes | join(', ')}} -k "/var/mmfs/ssl/dr_rsa.key"
      register: assign_remotecluster_return
      run_once: True
      changed_when: false
      failed_when: false

    - name: Mount Filesystem | Client Cluster (access) | Add and Mount the filesystems on the client clusters
      include_tasks: dr-filesystems.yml
      loop: "{{ scale_remotemount_filesystem_names }}"
      run_once: True
      loop_control:
        loop_var: filesystem_loop
        index_var: index
  
    - name: Mount Filesystem | Client Cluster (access) | Add and Mount the filesystems on the client clusters
      include_tasks: dr-filesets.yml
      loop: "{{ scale_fileset_names }}"
      run_once: True
      loop_control:
        loop_var: fileset_loop
        index_var: index